//
// Use this to re-generate file: make grpc
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.6.1
// source: peering/proto/peering.proto

package generated

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PeeringAbort_PeeringError int32

const (
	PeeringAbort_HANDSHAKE_FAILURE     PeeringAbort_PeeringError = 0
	PeeringAbort_STREAM_CLOSED         PeeringAbort_PeeringError = 1
	PeeringAbort_INVALID_MESSAGE_ORDER PeeringAbort_PeeringError = 2
)

// Enum value maps for PeeringAbort_PeeringError.
var (
	PeeringAbort_PeeringError_name = map[int32]string{
		0: "HANDSHAKE_FAILURE",
		1: "STREAM_CLOSED",
		2: "INVALID_MESSAGE_ORDER",
	}
	PeeringAbort_PeeringError_value = map[string]int32{
		"HANDSHAKE_FAILURE":     0,
		"STREAM_CLOSED":         1,
		"INVALID_MESSAGE_ORDER": 2,
	}
)

func (x PeeringAbort_PeeringError) Enum() *PeeringAbort_PeeringError {
	p := new(PeeringAbort_PeeringError)
	*p = x
	return p
}

func (x PeeringAbort_PeeringError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PeeringAbort_PeeringError) Descriptor() protoreflect.EnumDescriptor {
	return file_peering_proto_peering_proto_enumTypes[0].Descriptor()
}

func (PeeringAbort_PeeringError) Type() protoreflect.EnumType {
	return &file_peering_proto_peering_proto_enumTypes[0]
}

func (x PeeringAbort_PeeringError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PeeringAbort_PeeringError.Descriptor instead.
func (PeeringAbort_PeeringError) EnumDescriptor() ([]byte, []int) {
	return file_peering_proto_peering_proto_rawDescGZIP(), []int{3, 0}
}

type PeerClientMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*PeerClientMessage_PeerMessage
	//	*PeerClientMessage_ClientHello
	//	*PeerClientMessage_HandshakeDone
	Message isPeerClientMessage_Message `protobuf_oneof:"message"`
}

func (x *PeerClientMessage) Reset() {
	*x = PeerClientMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peering_proto_peering_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerClientMessage) ProtoMessage() {}

func (x *PeerClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_peering_proto_peering_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerClientMessage.ProtoReflect.Descriptor instead.
func (*PeerClientMessage) Descriptor() ([]byte, []int) {
	return file_peering_proto_peering_proto_rawDescGZIP(), []int{0}
}

func (m *PeerClientMessage) GetMessage() isPeerClientMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *PeerClientMessage) GetPeerMessage() *PeerMessage {
	if x, ok := x.GetMessage().(*PeerClientMessage_PeerMessage); ok {
		return x.PeerMessage
	}
	return nil
}

func (x *PeerClientMessage) GetClientHello() *ClientHello {
	if x, ok := x.GetMessage().(*PeerClientMessage_ClientHello); ok {
		return x.ClientHello
	}
	return nil
}

func (x *PeerClientMessage) GetHandshakeDone() *HandShakeDone {
	if x, ok := x.GetMessage().(*PeerClientMessage_HandshakeDone); ok {
		return x.HandshakeDone
	}
	return nil
}

type isPeerClientMessage_Message interface {
	isPeerClientMessage_Message()
}

type PeerClientMessage_PeerMessage struct {
	PeerMessage *PeerMessage `protobuf:"bytes,1,opt,name=peer_message,json=peerMessage,proto3,oneof"`
}

type PeerClientMessage_ClientHello struct {
	ClientHello *ClientHello `protobuf:"bytes,2,opt,name=client_hello,json=clientHello,proto3,oneof"`
}

type PeerClientMessage_HandshakeDone struct {
	HandshakeDone *HandShakeDone `protobuf:"bytes,3,opt,name=handshake_done,json=handshakeDone,proto3,oneof"`
}

func (*PeerClientMessage_PeerMessage) isPeerClientMessage_Message() {}

func (*PeerClientMessage_ClientHello) isPeerClientMessage_Message() {}

func (*PeerClientMessage_HandshakeDone) isPeerClientMessage_Message() {}

type PeerServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*PeerServerMessage_PeerMessage
	//	*PeerServerMessage_ServerHello
	Message isPeerServerMessage_Message `protobuf_oneof:"message"`
}

func (x *PeerServerMessage) Reset() {
	*x = PeerServerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peering_proto_peering_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerServerMessage) ProtoMessage() {}

func (x *PeerServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_peering_proto_peering_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerServerMessage.ProtoReflect.Descriptor instead.
func (*PeerServerMessage) Descriptor() ([]byte, []int) {
	return file_peering_proto_peering_proto_rawDescGZIP(), []int{1}
}

func (m *PeerServerMessage) GetMessage() isPeerServerMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *PeerServerMessage) GetPeerMessage() *PeerMessage {
	if x, ok := x.GetMessage().(*PeerServerMessage_PeerMessage); ok {
		return x.PeerMessage
	}
	return nil
}

func (x *PeerServerMessage) GetServerHello() *ServerHello {
	if x, ok := x.GetMessage().(*PeerServerMessage_ServerHello); ok {
		return x.ServerHello
	}
	return nil
}

type isPeerServerMessage_Message interface {
	isPeerServerMessage_Message()
}

type PeerServerMessage_PeerMessage struct {
	PeerMessage *PeerMessage `protobuf:"bytes,1,opt,name=peer_message,json=peerMessage,proto3,oneof"`
}

type PeerServerMessage_ServerHello struct {
	ServerHello *ServerHello `protobuf:"bytes,2,opt,name=server_hello,json=serverHello,proto3,oneof"`
}

func (*PeerServerMessage_PeerMessage) isPeerServerMessage_Message() {}

func (*PeerServerMessage_ServerHello) isPeerServerMessage_Message() {}

type PeerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*PeerMessage_Abort
	//	*PeerMessage_HttpRequestStart
	//	*PeerMessage_HttpRequestBody
	//	*PeerMessage_HttpRequestEnd
	//	*PeerMessage_HttpResponseStart
	//	*PeerMessage_HttpResponseBody
	//	*PeerMessage_HttpResponseEnd
	Message isPeerMessage_Message `protobuf_oneof:"message"`
}

func (x *PeerMessage) Reset() {
	*x = PeerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peering_proto_peering_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerMessage) ProtoMessage() {}

func (x *PeerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_peering_proto_peering_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerMessage.ProtoReflect.Descriptor instead.
func (*PeerMessage) Descriptor() ([]byte, []int) {
	return file_peering_proto_peering_proto_rawDescGZIP(), []int{2}
}

func (m *PeerMessage) GetMessage() isPeerMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *PeerMessage) GetAbort() *PeeringAbort {
	if x, ok := x.GetMessage().(*PeerMessage_Abort); ok {
		return x.Abort
	}
	return nil
}

func (x *PeerMessage) GetHttpRequestStart() *HttpRequestStart {
	if x, ok := x.GetMessage().(*PeerMessage_HttpRequestStart); ok {
		return x.HttpRequestStart
	}
	return nil
}

func (x *PeerMessage) GetHttpRequestBody() *HttpRequestBody {
	if x, ok := x.GetMessage().(*PeerMessage_HttpRequestBody); ok {
		return x.HttpRequestBody
	}
	return nil
}

func (x *PeerMessage) GetHttpRequestEnd() *HttpRequestEnd {
	if x, ok := x.GetMessage().(*PeerMessage_HttpRequestEnd); ok {
		return x.HttpRequestEnd
	}
	return nil
}

func (x *PeerMessage) GetHttpResponseStart() *HttpResponseStart {
	if x, ok := x.GetMessage().(*PeerMessage_HttpResponseStart); ok {
		return x.HttpResponseStart
	}
	return nil
}

func (x *PeerMessage) GetHttpResponseBody() *HttpResponseBody {
	if x, ok := x.GetMessage().(*PeerMessage_HttpResponseBody); ok {
		return x.HttpResponseBody
	}
	return nil
}

func (x *PeerMessage) GetHttpResponseEnd() *HttpResponseEnd {
	if x, ok := x.GetMessage().(*PeerMessage_HttpResponseEnd); ok {
		return x.HttpResponseEnd
	}
	return nil
}

type isPeerMessage_Message interface {
	isPeerMessage_Message()
}

type PeerMessage_Abort struct {
	Abort *PeeringAbort `protobuf:"bytes,1,opt,name=abort,proto3,oneof"`
}

type PeerMessage_HttpRequestStart struct {
	HttpRequestStart *HttpRequestStart `protobuf:"bytes,10,opt,name=http_request_start,json=httpRequestStart,proto3,oneof"`
}

type PeerMessage_HttpRequestBody struct {
	HttpRequestBody *HttpRequestBody `protobuf:"bytes,11,opt,name=http_request_body,json=httpRequestBody,proto3,oneof"`
}

type PeerMessage_HttpRequestEnd struct {
	HttpRequestEnd *HttpRequestEnd `protobuf:"bytes,12,opt,name=http_request_end,json=httpRequestEnd,proto3,oneof"`
}

type PeerMessage_HttpResponseStart struct {
	HttpResponseStart *HttpResponseStart `protobuf:"bytes,20,opt,name=http_response_start,json=httpResponseStart,proto3,oneof"`
}

type PeerMessage_HttpResponseBody struct {
	HttpResponseBody *HttpResponseBody `protobuf:"bytes,21,opt,name=http_response_body,json=httpResponseBody,proto3,oneof"`
}

type PeerMessage_HttpResponseEnd struct {
	HttpResponseEnd *HttpResponseEnd `protobuf:"bytes,22,opt,name=http_response_end,json=httpResponseEnd,proto3,oneof"`
}

func (*PeerMessage_Abort) isPeerMessage_Message() {}

func (*PeerMessage_HttpRequestStart) isPeerMessage_Message() {}

func (*PeerMessage_HttpRequestBody) isPeerMessage_Message() {}

func (*PeerMessage_HttpRequestEnd) isPeerMessage_Message() {}

func (*PeerMessage_HttpResponseStart) isPeerMessage_Message() {}

func (*PeerMessage_HttpResponseBody) isPeerMessage_Message() {}

func (*PeerMessage_HttpResponseEnd) isPeerMessage_Message() {}

type PeeringAbort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error PeeringAbort_PeeringError `protobuf:"varint,1,opt,name=error,proto3,enum=test.PeeringAbort_PeeringError" json:"error,omitempty"`
}

func (x *PeeringAbort) Reset() {
	*x = PeeringAbort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peering_proto_peering_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeeringAbort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeeringAbort) ProtoMessage() {}

func (x *PeeringAbort) ProtoReflect() protoreflect.Message {
	mi := &file_peering_proto_peering_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeeringAbort.ProtoReflect.Descriptor instead.
func (*PeeringAbort) Descriptor() ([]byte, []int) {
	return file_peering_proto_peering_proto_rawDescGZIP(), []int{3}
}

func (x *PeeringAbort) GetError() PeeringAbort_PeeringError {
	if x != nil {
		return x.Error
	}
	return PeeringAbort_HANDSHAKE_FAILURE
}

var File_peering_proto_peering_proto protoreflect.FileDescriptor

var file_peering_proto_peering_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x74,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x70,
	0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x68, 0x61, 0x6e,
	0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc2, 0x01, 0x0a,
	0x11, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x70,
	0x65, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x48, 0x00,
	0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x37, 0x0a,
	0x0e, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x53, 0x68, 0x61, 0x6b,
	0x65, 0x44, 0x6f, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61,
	0x6b, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x89, 0x01, 0x0a, 0x11, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x0b, 0x70, 0x65, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x31, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x65,
	0x6c, 0x6c, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x65, 0x6c,
	0x6c, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xcd, 0x03,
	0x0a, 0x0b, 0x50, 0x65, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a,
	0x05, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x62, 0x6f, 0x72, 0x74,
	0x48, 0x00, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x12, 0x41, 0x0a, 0x12, 0x68, 0x74, 0x74,
	0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x10, 0x68, 0x74, 0x74, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3e, 0x0a, 0x11,
	0x68, 0x74, 0x74, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x68, 0x74, 0x74,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x3b, 0x0a, 0x10,
	0x68, 0x74, 0x74, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x12, 0x44, 0x0a, 0x13, 0x68, 0x74, 0x74,
	0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x11, 0x68, 0x74,
	0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x41, 0x0a, 0x12, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x48, 0x74,
	0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00,
	0x52, 0x10, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x3e, 0x0a, 0x11, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x64, 0x48,
	0x00, 0x52, 0x0f, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45,
	0x6e, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9a, 0x01,
	0x0a, 0x0c, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x12, 0x35,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x62, 0x6f, 0x72,
	0x74, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x53, 0x0a, 0x0c, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x41, 0x4e, 0x44, 0x53, 0x48, 0x41,
	0x4b, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x02, 0x32, 0x47, 0x0a, 0x07, 0x50, 0x65,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x04, 0x50, 0x65, 0x65, 0x72, 0x12, 0x17, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x17, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x28,
	0x01, 0x30, 0x01, 0x42, 0x19, 0x5a, 0x17, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_peering_proto_peering_proto_rawDescOnce sync.Once
	file_peering_proto_peering_proto_rawDescData = file_peering_proto_peering_proto_rawDesc
)

func file_peering_proto_peering_proto_rawDescGZIP() []byte {
	file_peering_proto_peering_proto_rawDescOnce.Do(func() {
		file_peering_proto_peering_proto_rawDescData = protoimpl.X.CompressGZIP(file_peering_proto_peering_proto_rawDescData)
	})
	return file_peering_proto_peering_proto_rawDescData
}

var file_peering_proto_peering_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_peering_proto_peering_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_peering_proto_peering_proto_goTypes = []interface{}{
	(PeeringAbort_PeeringError)(0), // 0: test.PeeringAbort.PeeringError
	(*PeerClientMessage)(nil),      // 1: test.PeerClientMessage
	(*PeerServerMessage)(nil),      // 2: test.PeerServerMessage
	(*PeerMessage)(nil),            // 3: test.PeerMessage
	(*PeeringAbort)(nil),           // 4: test.PeeringAbort
	(*ClientHello)(nil),            // 5: ClientHello
	(*HandShakeDone)(nil),          // 6: HandShakeDone
	(*ServerHello)(nil),            // 7: ServerHello
	(*HttpRequestStart)(nil),       // 8: HttpRequestStart
	(*HttpRequestBody)(nil),        // 9: HttpRequestBody
	(*HttpRequestEnd)(nil),         // 10: HttpRequestEnd
	(*HttpResponseStart)(nil),      // 11: HttpResponseStart
	(*HttpResponseBody)(nil),       // 12: HttpResponseBody
	(*HttpResponseEnd)(nil),        // 13: HttpResponseEnd
}
var file_peering_proto_peering_proto_depIdxs = []int32{
	3,  // 0: test.PeerClientMessage.peer_message:type_name -> test.PeerMessage
	5,  // 1: test.PeerClientMessage.client_hello:type_name -> ClientHello
	6,  // 2: test.PeerClientMessage.handshake_done:type_name -> HandShakeDone
	3,  // 3: test.PeerServerMessage.peer_message:type_name -> test.PeerMessage
	7,  // 4: test.PeerServerMessage.server_hello:type_name -> ServerHello
	4,  // 5: test.PeerMessage.abort:type_name -> test.PeeringAbort
	8,  // 6: test.PeerMessage.http_request_start:type_name -> HttpRequestStart
	9,  // 7: test.PeerMessage.http_request_body:type_name -> HttpRequestBody
	10, // 8: test.PeerMessage.http_request_end:type_name -> HttpRequestEnd
	11, // 9: test.PeerMessage.http_response_start:type_name -> HttpResponseStart
	12, // 10: test.PeerMessage.http_response_body:type_name -> HttpResponseBody
	13, // 11: test.PeerMessage.http_response_end:type_name -> HttpResponseEnd
	0,  // 12: test.PeeringAbort.error:type_name -> test.PeeringAbort.PeeringError
	1,  // 13: test.Peering.Peer:input_type -> test.PeerClientMessage
	2,  // 14: test.Peering.Peer:output_type -> test.PeerServerMessage
	14, // [14:15] is the sub-list for method output_type
	13, // [13:14] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_peering_proto_peering_proto_init() }
func file_peering_proto_peering_proto_init() {
	if File_peering_proto_peering_proto != nil {
		return
	}
	file_peering_proto_http_proto_init()
	file_peering_proto_handshake_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_peering_proto_peering_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerClientMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peering_proto_peering_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerServerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peering_proto_peering_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peering_proto_peering_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeeringAbort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_peering_proto_peering_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*PeerClientMessage_PeerMessage)(nil),
		(*PeerClientMessage_ClientHello)(nil),
		(*PeerClientMessage_HandshakeDone)(nil),
	}
	file_peering_proto_peering_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*PeerServerMessage_PeerMessage)(nil),
		(*PeerServerMessage_ServerHello)(nil),
	}
	file_peering_proto_peering_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*PeerMessage_Abort)(nil),
		(*PeerMessage_HttpRequestStart)(nil),
		(*PeerMessage_HttpRequestBody)(nil),
		(*PeerMessage_HttpRequestEnd)(nil),
		(*PeerMessage_HttpResponseStart)(nil),
		(*PeerMessage_HttpResponseBody)(nil),
		(*PeerMessage_HttpResponseEnd)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_peering_proto_peering_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_peering_proto_peering_proto_goTypes,
		DependencyIndexes: file_peering_proto_peering_proto_depIdxs,
		EnumInfos:         file_peering_proto_peering_proto_enumTypes,
		MessageInfos:      file_peering_proto_peering_proto_msgTypes,
	}.Build()
	File_peering_proto_peering_proto = out.File
	file_peering_proto_peering_proto_rawDesc = nil
	file_peering_proto_peering_proto_goTypes = nil
	file_peering_proto_peering_proto_depIdxs = nil
}
